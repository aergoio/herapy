
########################################
# !!!DO NOT MODIFY THIS FILE DIRECTLY!!!
########################################
#
# This file is generated by 'generate_aergo_conf.py'.
#
AERGO_DEFAULT_CONF = {
    "base": {
        "datadir": "",
        "dbtype": "",
        "enableprofile": False,
        "profileport": 0,
        "enablerest": False,
        "enabletestmode": False,
        "personal": False,
    },
    "rpc": {
        "netserviceaddr": "",
        "netserviceport": 0,
        "netservicetrace": False,
        "nstls": False,
        "nscert": "",
        "nskey": "",
        "nsallowcors": False,
    },
    "rest": {
        "restport": 0,
    },
    "p2p": {
        "netprotocoladdr": "",
        "netprotocolport": 0,
        "npbindaddr": "",
        "npbindport": 0,
        "nptls": False,
        "npcert": "",
        "npkey": "",
        "npaddpeers": [],
        "npmaxpeers": 0,
        "nppeerpool": 0,
    },
    "blockchain": {
        "maxblocksize": 0,
        "coinbaseaccount": "",
        "maxanchorcount": 0,
        "usefastsyncer": False,
    },
    "mempool": {
        "showmetrics": False,
        "verifiers": 0,
        "dumpfilepath": "",
    },
    "consensus": {
        "enablebp": False,
        "enabledpos": False,
        "blockinterval": 0,
        "dposbps": 0,
        "bpids": [],
    },
    "monitor": {
        "protocol": "",
        "endpoint": "",
    },
}


class AergoConfig:
    def __init__(self):
        self.__conf = AERGO_DEFAULT_CONF

    @property
    def base(self):
        return self.__conf['base']

    @property
    def base_datadir(self):
        return self.__conf['base']['datadir']

    @base_datadir.setter
    def base_datadir(self, v):
        if isinstance(v, str):
            raise TypeError("base.datadir should bea string type")
        self.__conf['base']['datadir'] = v

    @property
    def base_dbtype(self):
        return self.__conf['base']['dbtype']

    @base_dbtype.setter
    def base_dbtype(self, v):
        if isinstance(v, str):
            raise TypeError("base.dbtype should bea string type")
        self.__conf['base']['dbtype'] = v

    @property
    def base_enableprofile(self):
        return self.__conf['base']['enableprofile']

    @base_enableprofile.setter
    def base_enableprofile(self, v):
        if isinstance(v, bool):
            raise TypeError("base.enableprofile should bea boolean type")
        self.__conf['base']['enableprofile'] = v

    @property
    def base_profileport(self):
        return self.__conf['base']['profileport']

    @base_profileport.setter
    def base_profileport(self, v):
        if isinstance(v, int):
            raise TypeError("base.profileport should bea number type")
        self.__conf['base']['profileport'] = v

    @property
    def base_enablerest(self):
        return self.__conf['base']['enablerest']

    @base_enablerest.setter
    def base_enablerest(self, v):
        if isinstance(v, bool):
            raise TypeError("base.enablerest should bea boolean type")
        self.__conf['base']['enablerest'] = v

    @property
    def base_enabletestmode(self):
        return self.__conf['base']['enabletestmode']

    @base_enabletestmode.setter
    def base_enabletestmode(self, v):
        if isinstance(v, bool):
            raise TypeError("base.enabletestmode should bea boolean type")
        self.__conf['base']['enabletestmode'] = v

    @property
    def base_personal(self):
        return self.__conf['base']['personal']

    @base_personal.setter
    def base_personal(self, v):
        if isinstance(v, bool):
            raise TypeError("base.personal should bea boolean type")
        self.__conf['base']['personal'] = v

    @property
    def rpc(self):
        return self.__conf['rpc']

    @property
    def rpc_netserviceaddr(self):
        return self.__conf['rpc']['netserviceaddr']

    @rpc_netserviceaddr.setter
    def rpc_netserviceaddr(self, v):
        if isinstance(v, str):
            raise TypeError("rpc.netserviceaddr should bea string type")
        self.__conf['rpc']['netserviceaddr'] = v

    @property
    def rpc_netserviceport(self):
        return self.__conf['rpc']['netserviceport']

    @rpc_netserviceport.setter
    def rpc_netserviceport(self, v):
        if isinstance(v, int):
            raise TypeError("rpc.netserviceport should bea number type")
        self.__conf['rpc']['netserviceport'] = v

    @property
    def rpc_netservicetrace(self):
        return self.__conf['rpc']['netservicetrace']

    @rpc_netservicetrace.setter
    def rpc_netservicetrace(self, v):
        if isinstance(v, bool):
            raise TypeError("rpc.netservicetrace should bea boolean type")
        self.__conf['rpc']['netservicetrace'] = v

    @property
    def rpc_nstls(self):
        return self.__conf['rpc']['nstls']

    @rpc_nstls.setter
    def rpc_nstls(self, v):
        if isinstance(v, bool):
            raise TypeError("rpc.nstls should bea boolean type")
        self.__conf['rpc']['nstls'] = v

    @property
    def rpc_nscert(self):
        return self.__conf['rpc']['nscert']

    @rpc_nscert.setter
    def rpc_nscert(self, v):
        if isinstance(v, str):
            raise TypeError("rpc.nscert should bea string type")
        self.__conf['rpc']['nscert'] = v

    @property
    def rpc_nskey(self):
        return self.__conf['rpc']['nskey']

    @rpc_nskey.setter
    def rpc_nskey(self, v):
        if isinstance(v, str):
            raise TypeError("rpc.nskey should bea string type")
        self.__conf['rpc']['nskey'] = v

    @property
    def rpc_nsallowcors(self):
        return self.__conf['rpc']['nsallowcors']

    @rpc_nsallowcors.setter
    def rpc_nsallowcors(self, v):
        if isinstance(v, bool):
            raise TypeError("rpc.nsallowcors should bea boolean type")
        self.__conf['rpc']['nsallowcors'] = v

    @property
    def rest(self):
        return self.__conf['rest']

    @property
    def rest_restport(self):
        return self.__conf['rest']['restport']

    @rest_restport.setter
    def rest_restport(self, v):
        if isinstance(v, int):
            raise TypeError("rest.restport should bea number type")
        self.__conf['rest']['restport'] = v

    @property
    def p2p(self):
        return self.__conf['p2p']

    @property
    def p2p_netprotocoladdr(self):
        return self.__conf['p2p']['netprotocoladdr']

    @p2p_netprotocoladdr.setter
    def p2p_netprotocoladdr(self, v):
        if isinstance(v, str):
            raise TypeError("p2p.netprotocoladdr should bea string type")
        self.__conf['p2p']['netprotocoladdr'] = v

    @property
    def p2p_netprotocolport(self):
        return self.__conf['p2p']['netprotocolport']

    @p2p_netprotocolport.setter
    def p2p_netprotocolport(self, v):
        if isinstance(v, int):
            raise TypeError("p2p.netprotocolport should bea number type")
        self.__conf['p2p']['netprotocolport'] = v

    @property
    def p2p_npbindaddr(self):
        return self.__conf['p2p']['npbindaddr']

    @p2p_npbindaddr.setter
    def p2p_npbindaddr(self, v):
        if isinstance(v, str):
            raise TypeError("p2p.npbindaddr should bea string type")
        self.__conf['p2p']['npbindaddr'] = v

    @property
    def p2p_npbindport(self):
        return self.__conf['p2p']['npbindport']

    @p2p_npbindport.setter
    def p2p_npbindport(self, v):
        if isinstance(v, int):
            raise TypeError("p2p.npbindport should bea number type")
        self.__conf['p2p']['npbindport'] = v

    @property
    def p2p_nptls(self):
        return self.__conf['p2p']['nptls']

    @p2p_nptls.setter
    def p2p_nptls(self, v):
        if isinstance(v, bool):
            raise TypeError("p2p.nptls should bea boolean type")
        self.__conf['p2p']['nptls'] = v

    @property
    def p2p_npcert(self):
        return self.__conf['p2p']['npcert']

    @p2p_npcert.setter
    def p2p_npcert(self, v):
        if isinstance(v, str):
            raise TypeError("p2p.npcert should bea string type")
        self.__conf['p2p']['npcert'] = v

    @property
    def p2p_npkey(self):
        return self.__conf['p2p']['npkey']

    @p2p_npkey.setter
    def p2p_npkey(self, v):
        if isinstance(v, str):
            raise TypeError("p2p.npkey should bea string type")
        self.__conf['p2p']['npkey'] = v

    @property
    def p2p_npaddpeers(self):
        return self.__conf['p2p']['npaddpeers']

    @p2p_npaddpeers.setter
    def p2p_npaddpeers(self, v):
        if isinstance(v, list):
            raise TypeError("p2p.npaddpeers should bean array type")
        self.__conf['p2p']['npaddpeers'] = v

    @property
    def p2p_npmaxpeers(self):
        return self.__conf['p2p']['npmaxpeers']

    @p2p_npmaxpeers.setter
    def p2p_npmaxpeers(self, v):
        if isinstance(v, int):
            raise TypeError("p2p.npmaxpeers should bea number type")
        self.__conf['p2p']['npmaxpeers'] = v

    @property
    def p2p_nppeerpool(self):
        return self.__conf['p2p']['nppeerpool']

    @p2p_nppeerpool.setter
    def p2p_nppeerpool(self, v):
        if isinstance(v, int):
            raise TypeError("p2p.nppeerpool should bea number type")
        self.__conf['p2p']['nppeerpool'] = v

    @property
    def blockchain(self):
        return self.__conf['blockchain']

    @property
    def blockchain_maxblocksize(self):
        return self.__conf['blockchain']['maxblocksize']

    @blockchain_maxblocksize.setter
    def blockchain_maxblocksize(self, v):
        if isinstance(v, int):
            raise TypeError("blockchain.maxblocksize should bea number type")
        self.__conf['blockchain']['maxblocksize'] = v

    @property
    def blockchain_coinbaseaccount(self):
        return self.__conf['blockchain']['coinbaseaccount']

    @blockchain_coinbaseaccount.setter
    def blockchain_coinbaseaccount(self, v):
        if isinstance(v, str):
            raise TypeError("blockchain.coinbaseaccount should bea string type")
        self.__conf['blockchain']['coinbaseaccount'] = v

    @property
    def blockchain_maxanchorcount(self):
        return self.__conf['blockchain']['maxanchorcount']

    @blockchain_maxanchorcount.setter
    def blockchain_maxanchorcount(self, v):
        if isinstance(v, int):
            raise TypeError("blockchain.maxanchorcount should bea number type")
        self.__conf['blockchain']['maxanchorcount'] = v

    @property
    def blockchain_usefastsyncer(self):
        return self.__conf['blockchain']['usefastsyncer']

    @blockchain_usefastsyncer.setter
    def blockchain_usefastsyncer(self, v):
        if isinstance(v, bool):
            raise TypeError("blockchain.usefastsyncer should bea boolean type")
        self.__conf['blockchain']['usefastsyncer'] = v

    @property
    def mempool(self):
        return self.__conf['mempool']

    @property
    def mempool_showmetrics(self):
        return self.__conf['mempool']['showmetrics']

    @mempool_showmetrics.setter
    def mempool_showmetrics(self, v):
        if isinstance(v, bool):
            raise TypeError("mempool.showmetrics should bea boolean type")
        self.__conf['mempool']['showmetrics'] = v

    @property
    def mempool_verifiers(self):
        return self.__conf['mempool']['verifiers']

    @mempool_verifiers.setter
    def mempool_verifiers(self, v):
        if isinstance(v, int):
            raise TypeError("mempool.verifiers should bea number type")
        self.__conf['mempool']['verifiers'] = v

    @property
    def mempool_dumpfilepath(self):
        return self.__conf['mempool']['dumpfilepath']

    @mempool_dumpfilepath.setter
    def mempool_dumpfilepath(self, v):
        if isinstance(v, str):
            raise TypeError("mempool.dumpfilepath should bea string type")
        self.__conf['mempool']['dumpfilepath'] = v

    @property
    def consensus(self):
        return self.__conf['consensus']

    @property
    def consensus_enablebp(self):
        return self.__conf['consensus']['enablebp']

    @consensus_enablebp.setter
    def consensus_enablebp(self, v):
        if isinstance(v, bool):
            raise TypeError("consensus.enablebp should bea boolean type")
        self.__conf['consensus']['enablebp'] = v

    @property
    def consensus_enabledpos(self):
        return self.__conf['consensus']['enabledpos']

    @consensus_enabledpos.setter
    def consensus_enabledpos(self, v):
        if isinstance(v, bool):
            raise TypeError("consensus.enabledpos should bea boolean type")
        self.__conf['consensus']['enabledpos'] = v

    @property
    def consensus_blockinterval(self):
        return self.__conf['consensus']['blockinterval']

    @consensus_blockinterval.setter
    def consensus_blockinterval(self, v):
        if isinstance(v, int):
            raise TypeError("consensus.blockinterval should bea number type")
        self.__conf['consensus']['blockinterval'] = v

    @property
    def consensus_dposbps(self):
        return self.__conf['consensus']['dposbps']

    @consensus_dposbps.setter
    def consensus_dposbps(self, v):
        if isinstance(v, int):
            raise TypeError("consensus.dposbps should bea number type")
        self.__conf['consensus']['dposbps'] = v

    @property
    def consensus_bpids(self):
        return self.__conf['consensus']['bpids']

    @consensus_bpids.setter
    def consensus_bpids(self, v):
        if isinstance(v, list):
            raise TypeError("consensus.bpids should bean array type")
        self.__conf['consensus']['bpids'] = v

    @property
    def monitor(self):
        return self.__conf['monitor']

    @property
    def monitor_protocol(self):
        return self.__conf['monitor']['protocol']

    @monitor_protocol.setter
    def monitor_protocol(self, v):
        if isinstance(v, str):
            raise TypeError("monitor.protocol should bea string type")
        self.__conf['monitor']['protocol'] = v

    @property
    def monitor_endpoint(self):
        return self.__conf['monitor']['endpoint']

    @monitor_endpoint.setter
    def monitor_endpoint(self, v):
        if isinstance(v, str):
            raise TypeError("monitor.endpoint should bea string type")
        self.__conf['monitor']['endpoint'] = v


